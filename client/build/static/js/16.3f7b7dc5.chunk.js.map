{"version":3,"sources":["components/modals/Modal.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/toaster/Toaster.js","pages/register/Register.js"],"names":["Modal","props","dispatch","show","on","onClose","type","payload","color","centered","closeButton","header","body","onClick","modalOn","setModal","style","textAlign","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Toaster","position","autohide","fade","Register","modalErrorObj","modalEmailExistsObj","modalSuccessObj","useState","username","setUsername","email","setEmail","dealerName","setDealerName","password","setPassword","confirmPassword","setConfirmPassword","modal","setModalOn","toasters","addToaster","onSubmit","a","test","fetch","method","headers","JSON","stringify","res","status","className","map","element","i","md","lg","xl","placeholder","autoComplete","value","onChange","e","target","block"],"mappings":"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","file":"static/js/16.3f7b7dc5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CModal, CModalHeader, CModalTitle, CModalFooter, CModalBody, CButton } from \"@coreui/react\"\r\n\r\nfunction Modal(props) {\r\n    if (props.dispatch) {\r\n        return (\r\n            <CModal \r\n            show={props.on} \r\n            onClose={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    } else {\r\n        return (\r\n            <CModal \r\n            show={props.modalOn}\r\n            onClose={() => props.setModal(!props.modalOn)}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5 style = {{textAlign: \"center\"}}>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.setModal(!props.modalOn)}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { CToaster, CToast, CToastBody } from \"@coreui/react\"\r\n\r\nconst Toaster = ({color, body, show}) => {\r\n    return (\r\n        <CToaster position=\"top-right\">\r\n            <CToast show={show} autohide={3000} fade={true} color={color} style = {{textAlign: \"center\"}}>\r\n                <CToastBody>{body}</CToastBody>\r\n            </CToast>\r\n        </CToaster>\r\n    )\r\n}\r\n\r\nexport default Toaster","import React, { useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\nimport Modal from '../../components/modals/Modal'\r\nimport Toaster from '../../components/toaster/Toaster'\r\n\r\nconst Register = () => {\r\n  const missingInfo = \"Lütfen tüm alanları doldurunuz\"\r\n  const unmatchedPassword = \"Şifreniz uyuşmuyor, lütfen şifrelerinizi kontrol edin\"\r\n  const invalidEmail = \"Lütfen girilen E-Mail adresini kontrol edin\"\r\n  // const userAlreadyExists = \"Bu kullanıcı adı alınmıştır. Lütfen farklı bir kullanıcı adı seçiniz\"\r\n  const modalErrorObj = {\r\n    header: \"HATA\",\r\n    body: \"Bilgileriniz kaydedilmedi, lütfen daha sonra tekrar deneyin\",\r\n    color: \"danger\"\r\n  }\r\n  const modalEmailExistsObj = {\r\n    header: \"HATA\",\r\n    body: \"Bu kullanıcı mevcuttur. Lütfen şifrenizi yenileyin veya yeni hesap oluşturun\",\r\n    color: \"warning\"\r\n  }\r\n  const modalSuccessObj = {\r\n    header: \"BAŞARILI\",\r\n    body: \"Talebiniz başarıyla işlenmiştir! Lütfen mail hesabınıza gelen onaylama mesajını kontrol ediniz\",\r\n    color: \"success\"\r\n  }\r\n  const [username, setUsername] = useState(\"\")\r\n  const [email, setEmail] = useState(\"\")\r\n  const [dealerName, setDealerName] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n  const [modal, setModal] = useState({\r\n    header: \"\",\r\n    body: \"\",\r\n    color: \"\"\r\n  })\r\n  const [modalOn, setModalOn] = useState(false)\r\n  const [toasters, addToaster] = useState([])\r\n  // const reset = () => {\r\n  //   setUsername(\"\")\r\n  //   setDealerName(\"\")\r\n  //   setPassword(\"\")\r\n  //   setConfirmPassword(\"\")\r\n  // }\r\n\r\n  const verifyEmail = () => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (re.test(email) === false) {\r\n      addToaster([\r\n        ...toasters,\r\n        {body: invalidEmail}\r\n      ])\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  const verifyInput = () => {\r\n    if (username === \"\" || password === \"\" || confirmPassword === \"\" || dealerName === \"\" || email === \"\") {\r\n      addToaster([\r\n        ...toasters,\r\n        {body: missingInfo}\r\n      ])\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n  const verifyPassword = () => {\r\n    if (password !== confirmPassword) {\r\n      addToaster([\r\n        ...toasters,\r\n        {body: unmatchedPassword}\r\n      ])\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  const onSubmit = async () => {\r\n    if (verifyInput() && verifyEmail() && verifyPassword()) {\r\n      const res = await fetch(\"http://localhost:8080/register\" , {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          username,\r\n          password,\r\n          email,\r\n          dealerName\r\n        })\r\n      })\r\n      setModalOn(true)\r\n      if (res.status === 200) {\r\n        setModalOn(true)\r\n        setModal(modalSuccessObj)\r\n      } else if (res.status === 406) {\r\n        setModalOn(true)\r\n        setModal(modalEmailExistsObj)\r\n      } else {\r\n        setModalOn(true)\r\n        setModal(modalErrorObj)\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n        <CContainer>\r\n        {\r\n          toasters.map((element, i) => {\r\n            return <Toaster key = {i} body = {element.body} show = {true} color = {\"danger\"} />\r\n          })\r\n        }\r\n        <Modal header = {modal.header} body = {modal.body} color = {modal.color} modalOn = {modalOn} setModal = {setModalOn}/>\r\n          <CRow className=\"justify-content-center\">\r\n            <CCol md=\"9\" lg=\"7\" xl=\"6\">\r\n              <CCard className=\"mx-4\">\r\n                <CCardBody className=\"p-4\">\r\n                  <CForm>\r\n                    <div className = \"container\">\r\n                      <div className = \"row align-items-center justify-content-between\">\r\n                        <div className = \"col\">\r\n                          <h1>Kayıt olun</h1>\r\n                          <p className=\"text-muted\">Hesabınızı oluşturun</p>\r\n                        </div>\r\n                        {/* <div className = \"col\">\r\n                          <Link to = \"/login\" ><p>Giriş sayfasına git</p></Link>\r\n                        </div> */}\r\n                      </div>\r\n                    </div>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <i className=\"far fa-user\"></i>\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"text\" placeholder=\"Kullanıcı isminiz\" autoComplete=\"username\" value = {username}\r\n                      onChange = {(e) => setUsername(e.target.value)} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <i className=\"far fa-envelope\"></i>\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"text\" placeholder=\"e-mail adresiniz\" autoComplete=\"email\" value = {email}\r\n                      onChange = {(e) => setEmail(e.target.value)} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <i className=\"fas fa-store-alt\"></i>\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"text\" placeholder=\"Bayi ismi ÖRN: İstanbul İletişim\" autoComplete=\"dealer-name\" value = {dealerName}\r\n                      onChange = {(e) => {\r\n                        setDealerName(e.target.value)\r\n                        }} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <i className=\"fas fa-lock\"></i>\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"password\" placeholder=\"Şifreniz\" autoComplete=\"new-password\" value = {password}\r\n                      onChange = {(e) => setPassword(e.target.value)} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-4\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <i className=\"fas fa-lock\"></i>\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"password\" placeholder=\"Şifrenizi tekrar giriniz\" autoComplete=\"new-password\" value = {confirmPassword}\r\n                      onChange = {(e) => setConfirmPassword(e.target.value)} />\r\n                    </CInputGroup>\r\n                    <CButton color=\"success\" block onClick = {() => onSubmit()} >Hesabınızı oluşturun</CButton>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register\r\n"],"sourceRoot":""}