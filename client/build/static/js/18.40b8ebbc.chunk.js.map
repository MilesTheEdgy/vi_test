{"version":3,"sources":["components/modals/Modal.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/toaster/Toaster.js","pages/resetpassword/ResetPasswordVerify.js"],"names":["Modal","props","dispatch","show","on","onClose","type","payload","color","centered","closeButton","header","body","onClick","modalOn","setModal","style","textAlign","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Toaster","position","autohide","fade","ResetPassword","modalErrorObj","modalSuccessObj","useState","email","setEmail","modal","setModalOn","toasters","addToaster","onEmailSubmit","a","test","fetch","method","headers","res","status","className","map","element","i","md","lg","xl","placeholder","autoComplete","value","onChange","e","target","block"],"mappings":"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","file":"static/js/18.40b8ebbc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CModal, CModalHeader, CModalTitle, CModalFooter, CModalBody, CButton } from \"@coreui/react\"\r\n\r\nfunction Modal(props) {\r\n    if (props.dispatch) {\r\n        return (\r\n            <CModal \r\n            show={props.on} \r\n            onClose={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    } else {\r\n        return (\r\n            <CModal \r\n            show={props.modalOn}\r\n            onClose={() => props.setModal(!props.modalOn)}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5 style = {{textAlign: \"center\"}}>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.setModal(!props.modalOn)}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { CToaster, CToast, CToastBody } from \"@coreui/react\"\r\n\r\nconst Toaster = ({color, body, show}) => {\r\n    return (\r\n        <CToaster position=\"top-right\">\r\n            <CToast show={show} autohide={3000} fade={true} color={color} style = {{textAlign: \"center\"}}>\r\n                <CToastBody>{body}</CToastBody>\r\n            </CToast>\r\n        </CToaster>\r\n    )\r\n}\r\n\r\nexport default Toaster","import React, { useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\nimport Modal from '../../components/modals/Modal'\r\nimport Toaster from '../../components/toaster/Toaster'\r\n\r\nconst ResetPassword = () => {\r\n  const invalidEmail = \"Lütfen girilen E-Mail adresini kontrol edin\"\r\n  const modalErrorObj = {\r\n    header: \"HATA\",\r\n    body: \"Bilgileriniz kaydedilmedi, lütfen daha sonra tekrar deneyin\",\r\n    color: \"danger\"\r\n  }\r\n  const modalSuccessObj = {\r\n    header: \"BAŞARILI\",\r\n    body: \"Talebiniz başarıyla işlenmiştir! Eğer E-Mail adresiniz doğru isa, sizin E-Mail hesabınıza gelen maili kontrol ediniz\",\r\n    color: \"success\"\r\n  }\r\n  const [email, setEmail] = useState(\"\")\r\n  const [modal, setModal] = useState({})\r\n  const [modalOn, setModalOn] = useState(false)\r\n  const [toasters, addToaster] = useState([])\r\n\r\n  const verifyEmail = () => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (re.test(email) === false) {\r\n      addToaster([\r\n        ...toasters,\r\n        {body: invalidEmail}\r\n      ])\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  const onEmailSubmit = async () => {\r\n    if (verifyEmail()) {\r\n      const res = await fetch(`http://localhost:8080/resetpassword?email=${email}` , {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      })\r\n      setModalOn(true)\r\n      if (res.status === 200) {\r\n        setModal(modalSuccessObj)\r\n      } else {\r\n        setModal(modalErrorObj)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n        <CContainer>\r\n            {\r\n                toasters.map((element, i) => {\r\n                    return <Toaster key = {i} body = {element.body} show = {true} color = {\"danger\"} />\r\n                })\r\n            }\r\n            <CRow className=\"justify-content-center\">\r\n                <CCol md=\"9\" lg=\"7\" xl=\"6\">\r\n                    <CCard className=\"mx-4\">\r\n                        <CCardBody className=\"p-4\">\r\n                        <CForm>\r\n                            <div className = \"container\">\r\n                            <div className = \"row align-items-center justify-content-between\">\r\n                                <div className = \"col\">\r\n                                <h1>Şifrenizi resetleyin</h1>\r\n                                <p className=\"text-muted\">Aşağıdaki alana email adresinizi girerek resetle tuşuna basınız</p>\r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n                            <CInputGroup className=\"mb-3\">\r\n                            <CInputGroupPrepend>\r\n                                <CInputGroupText>\r\n                                <i className=\"far fa-envelope\"></i>\r\n                                </CInputGroupText>\r\n                            </CInputGroupPrepend>\r\n                            <CInput type=\"text\" placeholder=\"e-mail adresiniz\" autoComplete=\"email\" value = {email}\r\n                            onChange = {(e) => setEmail(e.target.value)} />\r\n                            </CInputGroup>\r\n                            <CButton color=\"success\" block onClick = {() => onEmailSubmit()} >Resetle</CButton>\r\n                        </CForm>\r\n                        </CCardBody>\r\n                    </CCard>\r\n                </CCol>\r\n            </CRow>\r\n            <Modal header = {modal.header} body = {modal.body} color = {modal.color} modalOn = {modalOn} setModal = {setModalOn}/>\r\n        </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ResetPassword\r\n"],"sourceRoot":""}