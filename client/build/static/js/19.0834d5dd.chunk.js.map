{"version":3,"sources":["components/modals/Modal.js","components/toaster/Toaster.js","pages/test/Test.js"],"names":["Modal","props","dispatch","show","on","onClose","type","payload","color","centered","closeButton","header","body","onClick","modalOn","setModal","style","textAlign","Toaster","position","autohide","fade","Test","onImageUpload","a","formData","FormData","append","image","console","log","fetch","method","res","json","data","useState","username","setUsername","password","setPassword","setImage","modal","setModalOn","toasters","addToaster","className","map","element","i","md","lg","xl","to","name","placeholder","autoComplete","value","onChange","e","target","event","files","img","onImageSelect","block"],"mappings":"+FAAA,yBA6CeA,IA1Cf,SAAeC,GACX,OAAIA,EAAMC,SAEF,eAAC,IAAD,CACAC,KAAMF,EAAMG,GACZC,QAAS,kBAAMJ,EAAMC,SAAS,CAACI,KAAO,gBAAiBC,QAAS,CAACD,KAAM,YACvEE,MAAOP,EAAMO,MACbC,UAAQ,EAJR,UAMI,cAAC,IAAD,CAAcC,aAAW,EAAzB,SACI,eAAC,IAAD,eAAeT,EAAMU,OAArB,SAEJ,cAAC,IAAD,UACI,6BAAKV,EAAMW,SAEf,cAAC,IAAD,UACI,cAAC,IAAD,CAASJ,MAAM,YAAYK,QAAS,kBAAMZ,EAAMC,SAAS,CAACI,KAAO,gBAAiBC,QAAS,CAACD,KAAM,YAAlG,wBAMR,eAAC,IAAD,CACAH,KAAMF,EAAMa,QACZT,QAAS,kBAAMJ,EAAMc,UAAUd,EAAMa,UACrCN,MAAOP,EAAMO,MACbC,UAAQ,EAJR,UAMI,cAAC,IAAD,CAAcC,aAAW,EAAzB,SACI,eAAC,IAAD,eAAeT,EAAMU,OAArB,SAEJ,cAAC,IAAD,UACI,oBAAIK,MAAS,CAACC,UAAW,UAAzB,SAAqChB,EAAMW,SAE/C,cAAC,IAAD,UACI,cAAC,IAAD,CAASJ,MAAM,YAAYK,QAAS,kBAAMZ,EAAMc,UAAUd,EAAMa,UAAhE,0B,iCCtCpB,oBAYeI,IAVC,SAAC,GAAyB,IAAxBV,EAAuB,EAAvBA,MAAOI,EAAgB,EAAhBA,KAAMT,EAAU,EAAVA,KAC3B,OACI,cAAC,KAAD,CAAUgB,SAAS,YAAnB,SACI,cAAC,KAAD,CAAQhB,KAAMA,EAAMiB,SAAU,IAAMC,MAAM,EAAMb,MAAOA,EAAOQ,MAAS,CAACC,UAAW,UAAnF,SACI,cAAC,KAAD,UAAaL,U,yIC6HdU,UAhHF,WAEX,IAUMC,EAAa,uCAAG,gCAAAC,EAAA,6DACdC,EAAW,IAAIC,UACZC,OAAO,SAAUC,GAC1BC,QAAQC,IAAI,MAAOF,GACnBC,QAAQC,IAAI,YAAaL,GAJL,SAQlBI,QAAQC,IAAI,YARM,SASAC,MAAM,UAAW,CACjCC,OAAQ,OACRpB,KAAMa,IAXU,cASZQ,EATY,iBAaCA,EAAIC,OAbL,QAaZC,EAbY,OAclBN,QAAQC,IAAI,kBAAmBK,GAdb,kDAgBlBN,QAAQC,IAAR,MAhBkB,0DAAH,qDAoBnB,EAAgCM,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOR,EAAP,KAAca,EAAd,KACA,EAA0BL,mBAAS,CACjCzB,OAAQ,GACRC,KAAM,GACNJ,MAAO,KAHT,mBAAOkC,EAAP,KAAc3B,EAAd,KAKA,EAA8BqB,oBAAS,GAAvC,mBAAOtB,EAAP,KAAgB6B,EAAhB,KACA,EAA+BP,mBAAS,IAAxC,mBAAOQ,EAAP,KAAiBC,EAAjB,KAWA,OALIR,GACFR,QAAQC,KALqB,WAC7Bf,EAAS,IACT8B,OAQA,qBAAKC,UAAU,qDAAf,SACI,eAAC,IAAD,WAEEF,EAASG,KAAI,SAACC,EAASC,GACrB,OAAO,cAAC,IAAD,CAAmBrC,KAAQoC,EAAQpC,KAAMT,MAAQ,EAAMK,MAAS,UAAhDyC,MAG3B,cAAC,IAAD,CAAOtC,OAAU+B,EAAM/B,OAAQC,KAAQ8B,EAAM9B,KAAMJ,MAASkC,EAAMlC,MAAOM,QAAWA,EAASC,SAAY4B,IACvG,cAAC,IAAD,CAAMG,UAAU,yBAAhB,SACE,cAAC,IAAD,CAAMI,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAvB,SACE,cAAC,IAAD,CAAON,UAAU,OAAjB,SACE,cAAC,IAAD,CAAWA,UAAU,MAArB,SACE,eAAC,IAAD,WACE,qBAAKA,UAAY,YAAjB,SACE,sBAAKA,UAAY,MAAjB,UACE,sBAAKA,UAAY,MAAjB,UACE,iDACA,mBAAGA,UAAU,aAAb,yDAEF,8BACE,cAAC,IAAD,CAAMO,GAAK,SAAX,SAAqB,uEAI3B,eAAC,IAAD,CAAaP,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOQ,KAAK,iBAGhB,cAAC,IAAD,CAAQhD,KAAK,OAAOiD,YAAY,8BAAoBC,aAAa,WAAWC,MAASpB,EACrFqB,SAAY,SAACC,GAAD,OAAOrB,EAAYqB,EAAEC,OAAOH,aAE1C,eAAC,IAAD,CAAaX,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOQ,KAAK,wBAGhB,cAAC,IAAD,CAAQhD,KAAK,WAAWiD,YAAY,gBAAWC,aAAa,eAAeC,MAASlB,EACpFmB,SAAY,SAACC,GAAD,OAAOnB,EAAYmB,EAAEC,OAAOH,aAE1C,cAAC,IAAD,UACE,uBAAOnD,KAAO,OAAOoD,SAAU,SAACC,GAAD,OA9F5B,SAACE,GACtB,GAAIA,EAAMD,OAAOE,OAASD,EAAMD,OAAOE,MAAM,GAAI,CAC/CjC,QAAQC,IAAI,qBAAsB+B,EAAMD,OAAOE,OAC/C,IAAIC,EAAMF,EAAMD,OAAOE,MAAM,GAC7BjC,QAAQC,IAAI,mCAAoCiC,GAEhDtB,EAASsB,IAwF6CC,CAAcL,QAEtD,cAAC,IAAD,CAASnD,MAAM,UAAUyD,OAAK,EAC9BpD,QAAW,kBAAMgB,QAAQC,IAAIF,IAD7B,wBAEA,cAAC,IAAD,CAASpB,MAAM,UAAUyD,OAAK,EAC9BpD,QAAW,kBAAMU,KADjB","file":"static/js/19.0834d5dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CModal, CModalHeader, CModalTitle, CModalFooter, CModalBody, CButton } from \"@coreui/react\"\r\n\r\nfunction Modal(props) {\r\n    if (props.dispatch) {\r\n        return (\r\n            <CModal \r\n            show={props.on} \r\n            onClose={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.dispatch({type : \"MODAL_DISPLAY\", payload: {type: \"CLOSE\"}})}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    } else {\r\n        return (\r\n            <CModal \r\n            show={props.modalOn}\r\n            onClose={() => props.setModal(!props.modalOn)}\r\n            color={props.color}\r\n            centered\r\n            >\r\n                <CModalHeader closeButton>\r\n                    <CModalTitle> {props.header} </CModalTitle>\r\n                </CModalHeader>\r\n                <CModalBody>\r\n                    <h5 style = {{textAlign: \"center\"}}>{props.body}</h5>\r\n                </CModalBody>\r\n                <CModalFooter>\r\n                    <CButton color=\"secondary\" onClick={() => props.setModal(!props.modalOn)}>Kapat</CButton>\r\n                </CModalFooter>\r\n            </CModal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Modal","import { CToaster, CToast, CToastBody } from \"@coreui/react\"\r\n\r\nconst Toaster = ({color, body, show}) => {\r\n    return (\r\n        <CToaster position=\"top-right\">\r\n            <CToast show={show} autohide={3000} fade={true} color={color} style = {{textAlign: \"center\"}}>\r\n                <CToastBody>{body}</CToastBody>\r\n            </CToast>\r\n        </CToaster>\r\n    )\r\n}\r\n\r\nexport default Toaster","import React, { useState } from 'react'\r\nimport {\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCol,\r\n  CContainer,\r\n  CForm,\r\n  CInput,\r\n  CInputGroup,\r\n  CInputGroupPrepend,\r\n  CInputGroupText,\r\n  CRow\r\n} from '@coreui/react'\r\nimport { Link } from \"react-router-dom\"\r\nimport CIcon from '@coreui/icons-react'\r\nimport Modal from '../../components/modals/Modal'\r\nimport Toaster from '../../components/toaster/Toaster'\r\n\r\nconst Test = () => {\r\n\r\n  const onImageSelect =  (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      console.log(\"event.target.files\", event.target.files)\r\n      let img = event.target.files[0];\r\n      console.log(\"img before using createobjecturl\", img)\r\n      // console.log(\"img before using createobjecturl\", URL.createObjectURL(img))\r\n      setImage(img)\r\n    }\r\n  };\r\n  \r\n  const onImageUpload = async () => {\r\n    const formData = new FormData()\r\n    formData.append(\"myFile\", image)\r\n    console.log(\"img\", image)\r\n    console.log(\"form data\", formData)\r\n    // const plainFormData = Object.fromEntries(formData.entries());\r\n    // const formDataJsonString = JSON.stringify(plainFormData);\r\n    try {\r\n      console.log(\"fetching\")\r\n      const res = await fetch(\"/upload\", {\r\n        method: \"POST\",\r\n        body: formData\r\n      })\r\n      const data = await res.json()\r\n      console.log(\"data from fetch\", data)\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n  \r\n  const [username, setUsername] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n  const [image, setImage] = useState(null)\r\n  const [modal, setModal] = useState({\r\n    header: \"\",\r\n    body: \"\",\r\n    color: \"\"\r\n  })\r\n  const [modalOn, setModalOn] = useState(false)\r\n  const [toasters, addToaster] = useState([])\r\n\r\n  const somethingdeletemelater = () => {\r\n    setModal({})\r\n    addToaster()\r\n  }\r\n  if (username)\r\n    console.log(somethingdeletemelater)\r\n\r\n    \r\n\r\n  return (\r\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\r\n        <CContainer>\r\n        {\r\n          toasters.map((element, i) => {\r\n            return <Toaster key = {i} body = {element.body} show = {true} color = {\"danger\"} />\r\n          })\r\n        }\r\n        <Modal header = {modal.header} body = {modal.body} color = {modal.color} modalOn = {modalOn} setModal = {setModalOn}/>\r\n          <CRow className=\"justify-content-center\">\r\n            <CCol md=\"9\" lg=\"7\" xl=\"6\">\r\n              <CCard className=\"mx-4\">\r\n                <CCardBody className=\"p-4\">\r\n                  <CForm>\r\n                    <div className = \"container\">\r\n                      <div className = \"row\">\r\n                        <div className = \"col\">\r\n                          <h1>Kayıt olun</h1>\r\n                          <p className=\"text-muted\">Hesabınızı oluşturun</p>\r\n                        </div>\r\n                        <div>\r\n                          <Link to = \"/login\" ><p>Giriş sayfasına git</p></Link>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-user\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"text\" placeholder=\"Kullanıcı isminiz\" autoComplete=\"username\" value = {username}\r\n                      onChange = {(e) => setUsername(e.target.value)} />\r\n                    </CInputGroup>\r\n                    <CInputGroup className=\"mb-3\">\r\n                      <CInputGroupPrepend>\r\n                        <CInputGroupText>\r\n                          <CIcon name=\"cil-lock-locked\" />\r\n                        </CInputGroupText>\r\n                      </CInputGroupPrepend>\r\n                      <CInput type=\"password\" placeholder=\"Şifreniz\" autoComplete=\"new-password\" value = {password}\r\n                      onChange = {(e) => setPassword(e.target.value)} />\r\n                    </CInputGroup>\r\n                    <CInputGroup>\r\n                      <input type = \"file\" onChange={(e) => onImageSelect(e)} />\r\n                    </CInputGroup>\r\n                    <CButton color=\"success\" block \r\n                    onClick = {() => console.log(image)}>test value</CButton>\r\n                    <CButton color=\"success\" block \r\n                    onClick = {() => onImageUpload()}>Submit</CButton>\r\n                  </CForm>\r\n                </CCardBody>\r\n              </CCard>\r\n            </CCol>\r\n          </CRow>\r\n        </CContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Test\r\n"],"sourceRoot":""}